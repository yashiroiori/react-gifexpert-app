{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFecthGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","id","images","original","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCLlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC/B,OACI,yBAAKC,UAAU,0CACX,yBACIC,IAAKF,EACLG,IAAKJ,M,uBCPRK,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DACJ,mCADI,SAEAC,MAAM,+CAAD,OADT,mCACS,sBAAsEC,UAAUH,KAFrF,cAEbI,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,SAASjB,QARf,kBAWZY,GAXY,4CAAH,sDCKPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGvB,CAACd,IACIe,EDJwBK,CAAapB,GAAhCW,EARuB,EAQ5BL,KAAaQ,EARe,EAQfA,QAEpB,OACI,yBAAKlB,UAAU,aACX,wBAAIA,UAAU,qCAAqCI,GAClDc,GAAW,uBAAGlB,UAAU,oCAAb,eAERe,EAAOH,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIY,IAAKZ,EAAIC,IACLD,SEnBfa,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,cADhB,mBACvBQ,EADuB,KACXT,EADW,KAE9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQS,EAAWoB,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACIqB,IAAKrB,EACLA,SAAUA,U,MCZtCuB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.10b8bd82.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 0){\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img \n                src={url}\n                alt={title}\n            />\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const apiKey = 'IbIMjKEPZbUAV9Y9tK4fBxYG5ee74kkq';\n    const resp = await fetch(`http://api.giphy.com/v1/gifs/search?api_key=${ apiKey }&limit=5&q=${encodeURI(category)}`);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.original.url,\n        };\n    });\n    return gifs;\n}","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFecthGifs';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({category}) => {\n    // const [images, setImages] = useState([]);\n    \n    // useEffect(() => {\n    //     getGifs(category)\n    //         .then(img => setImages(img) );\n    // },[category]);\n        \n    const {data:images, loading} = useFetchGifs(category);\n    \n    return (\n        <div className='fullWidth'>\n            <h2 className='animate__animated animate__fadeIn'>{category}</h2>\n            {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\n            {\n                images.map(img => (\n                    <GifGridItem \n                        key={img.id} \n                        {...img}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                });\n            });\n    },[category]);\n    return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GitExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch'])\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GitExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}